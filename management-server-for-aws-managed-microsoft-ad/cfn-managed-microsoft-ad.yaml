---
AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS Directory Service Managed Microsoft AD (with rerated environment)"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "General Information"
        Parameters:
          - SystemName
          - Environment
      - Label:
          default: "Network Configuration"
        Parameters:
          - CidrBlockVPC
          - CidrBlockSubnetPublic1
          - CidrBlockSubnetPublic2
          - CidrBlockSubnetPrivate1
          - CidrBlockSubnetPrivate2
          - CidrBlockMyIP
      - Label:
          default: "Directory Service Configuration"
        Parameters:
          - DomainNameFQDN
          - DomainNameNetBIOS
          - DomainAdminPassword
      - Label:
          default: "EC2 Instance Configuration (Bastion Server)"
        Parameters:
          - EC2BastionImageID
          - EC2BastionInstanceType
          - EC2BastionKeyName
          - EC2BastionVolumeType
          - EC2BastionVolumeSize
      - Label:
          default: "EC2 Instance Configuration (Management Server)"
        Parameters:
          - EC2ManagementImageID
          - EC2ManagementInstanceType
          - EC2ManagementKeyName
          - EC2ManagementVolumeType
          - EC2ManagementVolumeSize

Parameters:
  SystemName:
    Type: String
    Default: adtest

  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - str
      - prd

  CidrBlockVPC:
    Type: String
    Default: 192.168.0.0/16

  CidrBlockSubnetPublic1:
    Type: String
    Default: 192.168.0.0/24

  CidrBlockSubnetPublic2:
    Type: String
    Default: 192.168.1.0/24

  CidrBlockSubnetPrivate1:
    Type: String
    Default: 192.168.128.0/24

  CidrBlockSubnetPrivate2:
    Type: String
    Default: 192.168.129.0/24

  CidrBlockMyIP:
    Type: String

  DomainNameFQDN:
    Type: String
    Default: example.intranet

  DomainNameNetBIOS:
    Type: String
    Default: EXAMPLE

  DomainAdminPassword:
    Type: String
    Default: P@ssw0rd
    NoEcho: true

  EC2BastionImageID:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-Japanese-Full-Base

  EC2BastionInstanceType:
    Type: String
    Default: t3.micro

  EC2BastionKeyName:
    Type: AWS::EC2::KeyPair::KeyName

  EC2BastionVolumeType:
    Type: String
    Default: gp2

  EC2BastionVolumeSize:
    Type: String
    Default: 30

  EC2ManagementImageID:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-Japanese-Full-Base

  EC2ManagementInstanceType:
    Type: String
    Default: t3.micro

  EC2ManagementKeyName:
    Type: AWS::EC2::KeyPair::KeyName

  EC2ManagementVolumeType:
    Type: String
    Default: gp2

  EC2ManagementVolumeSize:
    Type: String
    Default: 30

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlockVPC
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${SystemName}-${Environment}-vpc"
        - Key: System
          Value: !Ref SystemName
        - Key: Environment
          Value: !Ref Environment

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${SystemName}-${Environment}-igw"
        - Key: System
          Value: !Ref SystemName
        - Key: Environment
          Value: !Ref Environment

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  SubnetPublic1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Ref CidrBlockSubnetPublic1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${SystemName}-${Environment}-public1-subnet"
        - Key: System
          Value: !Ref SystemName
        - Key: Environment
          Value: !Ref Environment

  SubnetPublic2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Ref CidrBlockSubnetPublic2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${SystemName}-${Environment}-public2-subnet"
        - Key: System
          Value: !Ref SystemName
        - Key: Environment
          Value: !Ref Environment

  SubnetPrivate1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Ref CidrBlockSubnetPrivate1
      Tags:
        - Key: Name
          Value: !Sub "${SystemName}-${Environment}-private1-subnet"
        - Key: System
          Value: !Ref SystemName
        - Key: Environment
          Value: !Ref Environment

  SubnetPrivate2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Ref CidrBlockSubnetPrivate2
      Tags:
        - Key: Name
          Value: !Sub "${SystemName}-${Environment}-private2-subnet"
        - Key: System
          Value: !Ref SystemName
        - Key: Environment
          Value: !Ref Environment

  NACLPublic:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${SystemName}-${Environment}-public-nacl"
        - Key: System
          Value: !Ref SystemName
        - Key: Environment
          Value: !Ref Environment

  NACLPrivate:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${SystemName}-${Environment}-private-nacl"
        - Key: System
          Value: !Ref SystemName
        - Key: Environment
          Value: !Ref Environment

  NACLEntryPublicIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId: !Ref NACLPublic
        Egress: false
        RuleNumber: 100
        Protocol: -1
        CidrBlock: 0.0.0.0/0
        RuleAction: allow

  NACLEntryPublicEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId: !Ref NACLPublic
        Egress: true
        RuleNumber: 100
        Protocol: -1
        CidrBlock: 0.0.0.0/0
        RuleAction: allow

  NACLEntryPrivateIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId: !Ref NACLPrivate
        Egress: false
        RuleNumber: 100
        Protocol: -1
        CidrBlock: 0.0.0.0/0
        RuleAction: allow

  NACLEntryPrivateEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId: !Ref NACLPrivate
        Egress: true
        RuleNumber: 100
        Protocol: -1
        CidrBlock: 0.0.0.0/0
        RuleAction: allow

  NACLAssociationPubclic1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPublic1
      NetworkAclId: !Ref NACLPublic

  NACLAssociationPubclic2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPublic2
      NetworkAclId: !Ref NACLPublic

  NACLAssociationPrivate1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPrivate1
      NetworkAclId: !Ref NACLPrivate

  NACLAssociationPrivate2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPrivate2
      NetworkAclId: !Ref NACLPrivate

  EIPNatGateway:
    DependsOn:
      - VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    DependsOn:
      - EIPNatGateway
      - SubnetPublic1
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNatGateway.AllocationId
      SubnetId: !Ref SubnetPublic1
      Tags:
        - Key: Name
          Value: !Sub "${SystemName}-${Environment}-natgw"
        - Key: System
          Value: !Ref SystemName
        - Key: Environment
          Value: !Ref Environment

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${SystemName}-${Environment}-public-rtb"
        - Key: System
          Value: !Ref SystemName
        - Key: Environment
          Value: !Ref Environment

  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${SystemName}-${Environment}-private-rtb"
        - Key: System
          Value: !Ref SystemName
        - Key: Environment
          Value: !Ref Environment

  RouteIGW:
    DependsOn:
      - VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteNatGateway:
    DependsOn:
      - NatGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  RouteTableAssociationPublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublic1
      RouteTableId: !Ref RouteTablePublic

  RouteTableAssociationPublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublic2
      RouteTableId: !Ref RouteTablePublic

  RouteTableAssociationPrivate1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivate1
      RouteTableId: !Ref RouteTablePrivate

  RouteTableAssociationPrivate2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivate2
      RouteTableId: !Ref RouteTablePrivate

  IAMRoleSSM:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${SystemName}-${Environment}-ssm-role"
      AssumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /

  IAMInstanceProfileSSM:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${SystemName}-${Environment}-ssm-instance-profile"
      Roles: 
        - !Ref IAMRoleSSM
      Path: /

  SecurityGroupBastion:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${SystemName}-${Environment}-bastion-sg"
      GroupDescription: "Security group for bastion server"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref CidrBlockMyIP
          Description: "RDP access from My IP"
      Tags:
        - Key: Name
          Value: !Sub "${SystemName}-${Environment}-bastion-sg"
        - Key: System
          Value: !Ref SystemName
        - Key: Environment
          Value: !Ref Environment

  SecurityGroupManagement:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${SystemName}-${Environment}-management-sg"
      GroupDescription: "Security group for management server"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          SourceSecurityGroupId: !Ref SecurityGroupBastion
          Description: "RDP access from bastion server"
      Tags:
        - Key: Name
          Value: !Sub "${SystemName}-${Environment}-management-sg"
        - Key: System
          Value: !Ref SystemName
        - Key: Environment
          Value: !Ref Environment

  EC2InstanceBastion:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref EC2BastionImageID
      InstanceType: !Ref EC2BastionInstanceType
      KeyName: !Ref EC2BastionKeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: !Ref EC2BastionVolumeType
            VolumeSize: !Ref EC2BastionVolumeSize
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref SubnetPublic1
          GroupSet:
            - !Ref SecurityGroupBastion
      IamInstanceProfile: !Ref IAMInstanceProfileSSM
      UserData:
        Fn::Base64: !Sub |
          <powershell>
          $computerName = "BASTION"
          Rename-Computer -NewName $computerName -Force -Restart
          </powershell>
      Tags:
        - Key: Name
          Value: !Sub "${SystemName}-${Environment}-bastion"
        - Key: System
          Value: !Ref SystemName
        - Key: Environment
          Value: !Ref Environment

  EC2InstanceManagement:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref EC2ManagementImageID
      InstanceType: !Ref EC2ManagementInstanceType
      KeyName: !Ref EC2ManagementKeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: !Ref EC2ManagementVolumeType
            VolumeSize: !Ref EC2ManagementVolumeSize
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref SubnetPrivate1
          GroupSet:
            - !Ref SecurityGroupManagement
      IamInstanceProfile: !Ref IAMInstanceProfileSSM
      UserData:
        Fn::Base64: !Sub |
          <powershell>
          $computerName = "MANAGEMENT"
          Rename-Computer -NewName $computerName -Force -Restart
          </powershell>
      Tags:
        - Key: Name
          Value: !Sub "${SystemName}-${Environment}-management"
        - Key: System
          Value: !Ref SystemName
        - Key: Environment
          Value: !Ref Environment

  ManagedMicrosoftAD:
    Type: AWS::DirectoryService::MicrosoftAD
    Properties:
      Edition: Standard
      Name: !Ref DomainNameFQDN
      ShortName: !Ref DomainNameNetBIOS
      Password: !Ref DomainAdminPassword
      VpcSettings:
        VpcId: !Ref VPC
        SubnetIds:
          - !Ref SubnetPrivate1
          - !Ref SubnetPrivate2

Outputs:
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}::VPC"

  SubnetPublic1:
    Value: !Ref SubnetPublic1
    Export:
      Name: !Sub "${AWS::StackName}::SubnetPublic1"

  SubnetPublic2:
    Value: !Ref SubnetPublic2
    Export:
      Name: !Sub "${AWS::StackName}::SubnetPublic2"

  SubnetPrivate1:
    Value: !Ref SubnetPrivate1
    Export:
      Name: !Sub "${AWS::StackName}::SubnetPrivate1"

  SubnetPrivate2:
    Value: !Ref SubnetPrivate2
    Export:
      Name: !Sub "${AWS::StackName}::SubnetPrivate2"

  IAMRoleSSM:
    Value: !Ref IAMRoleSSM
    Export:
      Name: !Sub "${AWS::StackName}::IAMRoleSSM"

  IAMInstanceProfileSSM:
    Value: !Ref IAMInstanceProfileSSM
    Export:
      Name: !Sub "${AWS::StackName}::IAMInstanceProfileSSM"

  SecurityGroupBastion:
    Value: !Ref SecurityGroupBastion
    Export:
      Name: !Sub "${AWS::StackName}::SecurityGroupBastion"

  SecurityGroupManagement:
    Value: !Ref SecurityGroupManagement
    Export:
      Name: !Sub "${AWS::StackName}::SecurityGroupManagement"

  EC2InstanceBastion:
    Value: !Ref EC2InstanceBastion
    Export:
      Name: !Sub "${AWS::StackName}::EC2InstanceBastion"

  EC2InstanceBastionPublicIP:
    Value: !GetAtt EC2InstanceBastion.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}::EC2InstanceBastionPublicIP"

  EC2InstanceBastionPrivateIP:
    Value: !GetAtt EC2InstanceBastion.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}::EC2InstanceBastionPrivateIP"

  EC2InstanceManagement:
    Value: !Ref EC2InstanceManagement
    Export:
      Name: !Sub "${AWS::StackName}::EC2InstanceManagement"

  EC2InstanceManagementPrivateIP:
    Value: !GetAtt EC2InstanceManagement.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}::EC2InstanceManagementPrivateIP"

  ManagedMicrosoftAD:
    Value: !Ref ManagedMicrosoftAD
    Export:
      Name: !Sub "${AWS::StackName}::ManagedMicrosoftAD"

  ManagedMicrosoftADDnsIpAddresses:
    Value: { Fn::Join : [ ", ", !GetAtt "ManagedMicrosoftAD.DnsIpAddresses" ] }
    Export:
      Name: !Sub "${AWS::StackName}::ManagedMicrosoftADDnsIpAddresses"
